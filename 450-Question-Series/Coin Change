// Question CODE: Coin Change
// Question: You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
//Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.
/* Input:
 Input contains number of testcases, size of a vector n , a vector of coins and target amount for each testcase
 Sample Input 1:
  1
  3
  1 2 5
  11
*/
/* Output:
The only line of the output prints the minimum number of coins required to make the given amount.
Sample Output 1:
3
Explanation Of Sample Input 1:
11 = 5 + 5 + 1

*/




#include <bits/stdc++.h>
using namespace std;

int coinChange(vector<int>& coins, int am) {
        //int ans = INT_MAX;
        int n = coins.size();
        vector<int> dp(am+1,10001);
        dp[0] = 0;
        for(int i=0;i<n;i++)
        {
            for(int j=coins[i];j<=am;j++)
                dp[j] = min(dp[j],1+dp[j-coins[i]]);
        }
        return (dp[am]<=am)?dp[am]:-1;
    }

int main() 
{    
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif
    int tc;
    cin>>tc;
    while(tc--)
    {
        int n;
        cin>>n;
        vector<int> vec(n);
        for(int i=0;i<n;i++)
        {
            cin>>vec[i];
        }
        int amount;
        cin>>amount;
        cout<<coinChange(vec,amount)<<endl;
    }

    return 0;
}
