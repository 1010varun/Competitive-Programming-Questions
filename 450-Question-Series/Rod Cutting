// Question CODE: Minimum Cost to Cut a Stick
/* Question: Given a wooden stick of length n units. The stick is labelled from 0 to n.
  Given an integer array cuts where cuts[i] denotes a position you should perform a cut at.
  You should perform the cuts in order, you can change the order of the cuts as you wish.
  The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick,
  it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut).
  Return the minimum total cost of the cuts.*/
/* Input:
 Input contains number of testcases, size of a vector n and a vector for each testcase
 Sample Input 1:
  1
  7
  1 3 4 5
*/
/* Output:
The only line of the output prints the minimum total cost of the cuts.
Sample Output 1:
16
Explanation Of Sample Input 1:
Rearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with total cost = 16 (7 + 4 + 3 + 2 = 16).

*/



#include <bits/stdc++.h>
using namespace std;

int dp[102][102] = {};
int dfs(vector<int>& cuts, int i, int j) 
{
    if (j - i <= 1)
        return 0;
    if (!dp[i][j]) 
    {
        dp[i][j] = INT_MAX;
        for (auto k = i + 1; k < j; ++k)
            dp[i][j] = min(dp[i][j], cuts[j] - cuts[i] + dfs(cuts, i, k) + dfs(cuts, k, j));
    }
    return dp[i][j];
}
int minCost(int n, vector<int>& cuts) 
{
    cuts.push_back(0);
    cuts.push_back(n);
    sort(begin(cuts), end(cuts));
    return dfs(cuts, 0, cuts.size() - 1);
}
int main() 
{    
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif
    int tc;
    cin>>tc;
    while(tc--)
    {
        int n;
        cin>>n;
        vector<int> vec(n);
        for(int i=0;i<n;i++)
        {
            cin>>vec[i];
        }
        cout<<minCost(n,vec)<<endl;
    }

    return 0;
}
